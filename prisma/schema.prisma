datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdvisorType {
  TECHNICAL
  HR
}

enum RequestType {
  RESUME
  INTERVIEW
}

model Advisor {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username          String?     @unique
  givenName         String
  familyName        String
  email             String      @unique
  type              AdvisorType
  resumesPerWeek    Float
  interviewsPerWeek Float

  requestAssignments RequestAssignment[]
}

model Request {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username   String
  givenName  String
  familyName String
  email      String

  type      RequestType
  resumeUrl String?

  requestAssignments RequestAssignment[]
}

model RequestAssignment {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  advisor   Advisor @relation(fields: [advisorId], references: [id])
  advisorId String

  request   Request @relation(fields: [requestId], references: [id])
  requestId String

  @@id([advisorId, requestId])
}

enum TagType {
  INTEREST
  TECHNOLOGY
}

model Tag {
  id          String  @id
  displayName String
  type        TagType

  profiles Profile[]
}

model Profile {
  username String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  givenName  String
  familyName String
  email      String
  bio        String?

  underrepresentedGender    Boolean
  underrepresentedEthnicity Boolean

  urlResume   String?
  urlLinkedIn String?
  urlGithub   String?
  urlWebsite  String?

  gradHighSchoolAt DateTime?
  gradUniversityAt DateTime?
  workInternAt     DateTime?
  workFteAt        DateTime?

  searchOpen        Boolean
  searchInternships Boolean
  searchFullTimeAt  DateTime?

  experience         Tag[]
  eventParticipation EventParticipation[]
  recommendations    Recommendation[]
}

model EventParticipation {
  id      String @id @default(cuid())
  eventId String

  profile         Profile @relation(fields: [profileUsername], references: [username])
  profileUsername String

  awardIds Json?
}

enum RecommendationRating {
  INTERN_BELOW
  INTERN_MEETS
  INTERN_EXCEEDS
  NEW_GRAD
  NEW_GRAD_EXCEEDS
}

model Recommendation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username   String?
  givenName  String
  familyName String
  title      String
  employer   String

  relation String

  skillEngineering   RecommendationRating?
  skillTechnical     RecommendationRating?
  skillInterpersonal RecommendationRating?

  recommendation String?

  profile         Profile @relation(fields: [profileUsername], references: [username])
  profileUsername String
}
